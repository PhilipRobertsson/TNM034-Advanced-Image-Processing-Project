function [weightsFromEigenfaces] = eigenfaces(imagesFromDB1)
    % EIGENFACES - A MATLAB implementation of face recognition using eigenfaces.
    % This script computes eigenfaces using PCA. The weights from DB1 are
    % returned

    % Compute mean face
    meanFace = mean(imagesFromDB1, 2);

    % Subtract mean face from each image vector
    bigPhi = imagesFromDB1 - meanFace;

    % Compute eigenvectors of the covariance matrix
    transposeOfA = bigPhi'; % Transpose of the matrix
    B = transposeOfA * bigPhi; % Covariance matrix
    [eigenVectors, eigenValues] = eig(B); % Eigen decomposition

    % Compute eigenfaces
    eig_faces = zeros(size(bigPhi, 1), size(bigPhi, 2));
    for i = 1:size(bigPhi, 2)
        eigenface = bigPhi * eigenVectors(:, i);
        eig_faces(:, i) = eigenface / norm(eigenface); % Normalize eigenfaces
    end

    % Display the mean face
    % figure;
    %mean_face_img = reshape(mean_face, size(cropped));
    %imshow(mean_face_img, []);
    %title('Mean Face');

    % Compute weights for training images
    weights_train = eig_faces' * bigPhi;

    % Test image preprocessing
    test_img = imread('db1_01.jpg'); % Replace with the test image path
    gray = rgb2gray(test_img);
    norm_img = double(gray) / 255;
    cropped = norm_img(170:460, 70:320); %REPLACE
    phi_test = cropped(:) - meanFace; % Mean-adjusted test image

    % Compute weights for the test image
    weights_test = eig_faces' * phi_test;

    % Compute Euclidean distances between test image and training images
    distances = vecnorm(weights_train - weights_test, 2, 1);
    [min_distance, match_index] = min(distances);

    % Threshold for matching
    threshold = 10; % Adjust if needed
    if min_distance < threshold
        disp([num2str(match_index)]);
        matched_image = imread(image_files{match_index});
        figure;
        imshow(matched_image); % REMOVE BEFORE HANDING IN
        title('Matched Image');
    else
        disp('0');
    end
end